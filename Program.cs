using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.IdentityModel.Tokens;
using Microsoft.EntityFrameworkCore;
using MyWebApp.Data;
using Microsoft.Extensions.Logging;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Razor Pages ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ "/Login" ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (route "/")
builder.Services.AddRazorPages(options =>
{
    options.Conventions.AddPageRoute("/Login", ""); // localhost:xxxx/ ‚Üí Login
});

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Entity Framework Core + SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
{
    options.UseSqlServer(
        builder.Configuration.GetConnectionString("DefaultConnection"));

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á SQL Query ‡πÉ‡∏ô Console
    options.LogTo(Console.WriteLine, LogLevel.Information);
});

// üîê Authentication (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ TempData ‡∏≠‡∏¢‡∏π‡πà)
// ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Cookie/Identity ‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
/*
builder.Services.AddAuthentication(options =>
{
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
})
.AddCookie()
.AddOpenIdConnect(...);
*/

var app = builder.Build();

// ‚úÖ Middleware: Error handling
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// üîê Auth Middleware (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
app.UseAuthentication();
app.UseAuthorization();

// ‚úÖ Razor Pages Routes
app.MapRazorPages();

// ‚õî ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ fallback ‡πÑ‡∏õ Login ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß
// app.MapFallbackToPage("/Login");

app.Run();
